local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LogService = game:GetService("LogService")
local TextService = game:GetService("TextService")

-- Color Palette
local Colors = {
    Background = Color3.fromRGB(25, 25, 35),
    Accent = Color3.fromRGB(52, 93, 169),
    Text = Color3.fromRGB(220, 230, 255),
    ButtonHover = Color3.fromRGB(72, 113, 189),
    ScrollBar = Color3.fromRGB(72, 113, 189),
    Print = Color3.fromRGB(76, 175, 80),
    Warn = Color3.fromRGB(255, 152, 0),
    Error = Color3.fromRGB(244, 67, 54)
}

-- Create Debug GUI
local function CreateDebugUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ModernDebugPanel"
    screenGui.Parent = Players.LocalPlayer.PlayerGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 500, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -250, 0.5, -200)
    mainFrame.BackgroundColor3 = Colors.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 47, 1, 47)
    shadow.ZIndex = 0
    shadow.Image = "rbxassetid://6015897843"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.Parent = mainFrame

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = mainFrame

    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 50)
    header.BackgroundColor3 = Colors.Accent
    header.BorderSizePixel = 0
    header.Parent = mainFrame

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 12)
    headerCorner.Parent = header

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Text = "Debug Console"
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.TextColor3 = Colors.Text
    titleLabel.Size = UDim2.new(1, 0, 1, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Parent = header

    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -110)
    scrollFrame.Position = UDim2.new(0, 10, 0, 60)
    scrollFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 5
    scrollFrame.ScrollBarImageColor3 = Colors.ScrollBar
    scrollFrame.Parent = mainFrame

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = scrollFrame

    local actionFrame = Instance.new("Frame")
    actionFrame.Name = "ActionFrame"
    actionFrame.Size = UDim2.new(1, -20, 0, 40)
    actionFrame.Position = UDim2.new(0, 10, 1, -50)
    actionFrame.BackgroundTransparency = 1
    actionFrame.Parent = mainFrame

    local buttonLayout = Instance.new("UIGridLayout")
    buttonLayout.CellSize = UDim2.new(0.25, -7.5, 1, 0)
    buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    buttonLayout.FillDirection = Enum.FillDirection.Horizontal
    buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    buttonLayout.Parent = actionFrame

    local buttonStyles = {
        {Name = "Print", Color = Colors.Print},
        {Name = "Warn", Color = Colors.Warn},
        {Name = "Clear", Color = Colors.Accent}
    }

    for i, style in ipairs(buttonStyles) do
        local button = Instance.new("TextButton")
        button.Name = style.Name .. "Button"
        button.Text = style.Name
        button.BackgroundColor3 = style.Color
        button.BorderSizePixel = 0
        button.Font = Enum.Font.GothamBold
        button.TextSize = 14
        button.TextColor3 = Colors.Text
        button.LayoutOrder = i
        button.Parent = actionFrame

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = button
    end

    return screenGui
end

-- Function to add a debug message
local function AddDebugMessage(message, messageType)
    local scrollFrame = game.Players.LocalPlayer.PlayerGui.ModernDebugPanel.MainFrame.ScrollFrame

    local messageFrame = Instance.new("Frame")
    messageFrame.BackgroundTransparency = 0.9
    messageFrame.BorderSizePixel = 0

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -40, 1, 0)
    messageLabel.Position = UDim2.new(0, 5, 0, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextColor3 = Colors.Text
    messageLabel.Text = message
    messageLabel.TextWrapped = true  -- Enable text wrapping
    messageLabel.Parent = messageFrame

    local copyButton = Instance.new("TextButton")
    copyButton.Size = UDim2.new(0, 20, 0, 20)
    copyButton.Position = UDim2.new(1, -25, 0, 5)
    copyButton.BackgroundTransparency = 1
    copyButton.Text = "ðŸ“‹"  -- Clipboard emoji
    copyButton.Font = Enum.Font.SourceSans
    copyButton.TextSize = 16
    copyButton.Parent = messageFrame

    copyButton.MouseButton1Click:Connect(function()
        setclipboard(message)
    end)

    if messageType == "print" then
        messageFrame.BackgroundColor3 = Colors.Print
    elseif messageType == "warn" then
        messageFrame.BackgroundColor3 = Colors.Warn
    elseif messageType == "error" then
        messageFrame.BackgroundColor3 = Colors.Error
    end

    -- Calculate the size of the message frame based on the text
    local textSize = TextService:GetTextSize(message, messageLabel.TextSize, messageLabel.Font, Vector2.new(460, math.huge))
    messageFrame.Size = UDim2.new(0, textSize.X + 30, 0, textSize.Y + 10)
    messageLabel.Size = UDim2.new(0, textSize.X, 0, textSize.Y)

    messageFrame.Parent = scrollFrame

    local listLayout = scrollFrame.UIListLayout
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    scrollFrame.CanvasPosition = Vector2.new(0, listLayout.AbsoluteContentSize.Y - scrollFrame.AbsoluteWindowSize.Y)
end

-- Create the UI
local debugUI = CreateDebugUI()

-- Setup button functionality
local function SetupButtons()
    local actionFrame = debugUI.MainFrame.ActionFrame

    actionFrame.PrintButton.MouseButton1Click:Connect(function()
        print("This is a test print message")
    end)

    actionFrame.WarnButton.MouseButton1Click:Connect(function()
        warn("This is a test warning message")
    end)

    actionFrame.ClearButton.MouseButton1Click:Connect(function()
        local scrollFrame = debugUI.MainFrame.ScrollFrame
        for _, child in ipairs(scrollFrame:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    end)
end

SetupButtons()

-- Make the frame draggable
local function EnableDragging(frame)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

EnableDragging(debugUI.MainFrame)

-- Animate the panel when it appears
local function AnimatePanel()
    local frame = debugUI.MainFrame
    frame.Position = UDim2.new(0.5, -250, 1.5, 0)
    local goal = {}
    goal.Position = UDim2.new(0.5, -250, 0.5, -200)
    local info = TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)
    local tween = TweenService:Create(frame, info, goal)
    tween:Play()
end

AnimatePanel()

-- Connect to LogService to capture all outputs
LogService.MessageOut:Connect(function(message, messageType)
    if messageType == Enum.MessageType.MessageError then
        AddDebugMessage(message, "error")
    elseif messageType == Enum.MessageType.MessageWarning then
        AddDebugMessage(message, "warn")
    else
        AddDebugMessage(message, "print")
    end
end)
